name: Deploy Rest Countries App to AWS S3 and CloudFront

# Trigger deployment only on push to main branch
on:
  push:
    branches: [ main ]

# Environment variables
env:
  NODE_VERSION: '20'
  AWS_REGION: 'eu-north-1'
  ANGULAR_PROJECT_NAME: 'rest-countries'
  S3_BUCKET: 'kruzzstaticbucket'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Setup Node.js environment
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Install dependencies
    - name: Install dependencies
      run: npm ci

    # Optional: Run tests (uncomment if you have tests)
    # - name: Run unit tests
    #   run: npm run test -- --watch=false --browsers=ChromeHeadless

    # Optional: Run linting (uncomment if you use ESLint)
    # - name: Run ESLint
    #   run: npm run lint

    # Build Angular application for production
    - name: Build Angular application
      run: |
        echo "Building rest-countries app for production..."
        npm run build
        echo "Build completed. Checking output directory structure..."
        ls -la dist/
        echo "Contents of dist/rest-countries:"
        ls -la dist/rest-countries/ || echo "Directory structure might be different"

    # Verify build output exists (flexible check for different Angular builders)
    - name: Verify build output
      run: |
        echo "üîç Checking build output structure..."
        
        # Check if dist directory exists
        if [ ! -d "dist" ]; then
          echo "‚ùå dist directory not found!"
          exit 1
        fi
        
        # Find the actual output directory
        if [ -d "dist/rest-countries" ]; then
          BUILD_DIR="dist/rest-countries"
        elif [ -d "dist" ] && [ -f "dist/index.html" ]; then
          BUILD_DIR="dist"
        else
          echo "‚ùå Could not find build output directory!"
          echo "Available directories in dist/:"
          ls -la dist/ || echo "dist directory is empty or doesn't exist"
          exit 1
        fi
        
        echo "‚úÖ Found build directory: $BUILD_DIR"
        
        # Check for index.html
        if [ ! -f "$BUILD_DIR/index.html" ]; then
          echo "‚ùå index.html not found in $BUILD_DIR!"
          echo "Contents of $BUILD_DIR:"
          ls -la "$BUILD_DIR/"
          exit 1
        fi
        
        echo "‚úÖ Build verification passed"
        echo "BUILD_OUTPUT_DIR=$BUILD_DIR" >> $GITHUB_ENV

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Deploy static files to S3
    - name: Deploy to S3
      run: |
        echo "üöÄ Starting deployment to S3 bucket: ${{ env.S3_BUCKET }}"
        echo "üìÅ Using build directory: $BUILD_OUTPUT_DIR"
        
        # Sync all files to S3 with default cache control
        aws s3 sync $BUILD_OUTPUT_DIR s3://${{ env.S3_BUCKET }} \
          --delete \
          --cache-control "max-age=86400" \
          --exclude "*.js" \
          --exclude "*.css" \
          --exclude "*.woff*" \
          --exclude "*.ttf" \
          --exclude "*.eot" \
          --exclude "*.otf" \
          --exclude "*.png" \
          --exclude "*.jpg" \
          --exclude "*.jpeg" \
          --exclude "*.gif" \
          --exclude "*.svg" \
          --exclude "*.ico"
        
        echo "üì¶ Main files uploaded with 1-day cache"

    # Set long cache headers for hashed JS and CSS files
    - name: Set cache headers for JS and CSS files
      run: |
        echo "‚ö° Setting long cache headers for JS and CSS files..."
        aws s3 cp s3://${{ env.S3_BUCKET }} s3://${{ env.S3_BUCKET }} \
          --recursive \
          --exclude "*" \
          --include "*.js" \
          --include "*.css" \
          --cache-control "max-age=31536000" \
          --metadata-directive REPLACE
        
        echo "‚úÖ JS and CSS files cached for 1 year"

    # Set cache headers for font files
    - name: Set cache headers for fonts
      run: |
        echo "üî§ Setting cache headers for font files..."
        aws s3 cp s3://${{ env.S3_BUCKET }} s3://${{ env.S3_BUCKET }} \
          --recursive \
          --exclude "*" \
          --include "*.woff*" \
          --include "*.ttf" \
          --include "*.eot" \
          --include "*.otf" \
          --cache-control "max-age=31536000" \
          --metadata-directive REPLACE
        
        echo "‚úÖ Font files cached for 1 year"

    # Set cache headers for images and icons
    - name: Set cache headers for images
      run: |
        echo "üñºÔ∏è Setting cache headers for images..."
        aws s3 cp s3://${{ env.S3_BUCKET }} s3://${{ env.S3_BUCKET }} \
          --recursive \
          --exclude "*" \
          --include "*.png" \
          --include "*.jpg" \
          --include "*.jpeg" \
          --include "*.gif" \
          --include "*.svg" \
          --include "*.ico" \
          --cache-control "max-age=2592000" \
          --metadata-directive REPLACE
        
        echo "‚úÖ Images cached for 30 days"

    # Set special cache headers for index.html (no cache)
    - name: Set no-cache for index.html
      run: |
        echo "üìÑ Setting no-cache for index.html..."
        aws s3 cp s3://${{ env.S3_BUCKET }}/index.html s3://${{ env.S3_BUCKET }}/index.html \
          --cache-control "no-cache, no-store, must-revalidate" \
          --metadata-directive REPLACE
        
        echo "‚úÖ index.html set to no-cache"

    # Invalidate CloudFront distribution
    - name: Invalidate CloudFront cache
      run: |
        echo "üîÑ Creating CloudFront invalidation..."
        INVALIDATION_OUTPUT=$(aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*" \
          --output json)
        
        INVALIDATION_ID=$(echo $INVALIDATION_OUTPUT | jq -r '.Invalidation.Id')
        echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"
        echo "‚è≥ Invalidation may take 5-15 minutes to complete"

    # Display deployment summary
    - name: Deployment Summary
      run: |
        echo ""
        echo "üéâ ===== DEPLOYMENT COMPLETED SUCCESSFULLY ====="
        echo ""
        echo "üìä Deployment Details:"
        echo "   üöÄ Project: rest-countries"
        echo "   üì¶ S3 Bucket: ${{ env.S3_BUCKET }}"
        echo "   üåç Region: ${{ env.AWS_REGION }}"
        echo "   üåê CloudFront: https://${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}.cloudfront.net"
        echo ""
        echo "‚è∞ Cache Settings Applied:"
        echo "   üìÑ HTML files: No cache"
        echo "   ‚ö° JS/CSS files: 1 year (31536000s)"
        echo "   üî§ Font files: 1 year (31536000s)"
        echo "   üñºÔ∏è Images: 30 days (2592000s)"
        echo "   üìÅ Other files: 1 day (86400s)"
        echo ""
        echo "üîó Your app should be available at:"
        echo "   https://${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}.cloudfront.net"
        echo ""
        echo "‚ö†Ô∏è  Note: CloudFront invalidation may take 5-15 minutes"
        echo "================================================"